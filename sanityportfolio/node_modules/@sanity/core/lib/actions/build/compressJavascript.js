"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _terser = _interopRequireDefault(require("terser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * @param {string} inputFile
 */
function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(function* (inputFile) {
    var _result;

    var buffer = yield _fs.default.promises.readFile(inputFile);
    var outPath = "".concat(inputFile, ".min");
    var result;

    try {
      result = yield _terser.default.minify(buffer.toString(), {
        compress: true,
        mangle: true
      });
    } catch (e) {
      throw new Error("Failed to minify bundle (".concat(_path.default.basename(inputFile), "):\n\n").concat((e === null || e === void 0 ? void 0 : e.message) || 'Terser Error'));
    }

    if (!((_result = result) !== null && _result !== void 0 && _result.code)) {
      var _result$error;

      throw new Error("Failed to minify bundle (".concat(_path.default.basename(inputFile), "):\n\n").concat(((_result$error = result.error) === null || _result$error === void 0 ? void 0 : _result$error.message) || 'No code output from Terser.'));
    }

    yield _fs.default.promises.writeFile(outPath, result.code);
    yield _fsExtra.default.unlink(inputFile);
    yield _fsExtra.default.move(outPath, inputFile);
  });
  return _ref.apply(this, arguments);
}